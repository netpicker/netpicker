server {
    server_name  0.0.0.0;
    listen 443 ssl;

    ssl_certificate /etc/nginx/certs/certificate.crt;
    ssl_certificate_key /etc/nginx/certs/private.key;

    # SSL configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    
    # SSL session handling
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;

    proxy_connect_timeout       300;
    proxy_send_timeout          300;
    proxy_read_timeout          300;
    send_timeout                300;

    # reverse proxying for websockets needs a special case
    location /api/v1/agents/ws {
        proxy_pass http://api:8000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_read_timeout 86400;
    }

    location /api/ {
        rewrite ^(.*)$ $1 break;
        proxy_pass http://api:8000;
        proxy_set_header Host $host;
        # proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /openapi.json {
        rewrite ^(.*)$ $1 break;
        proxy_pass http://api:8000/openapi.json;
    }

    location /swagger/ {
        rewrite ^\/swagger(.*)$ $1 break;
        proxy_pass http://swagger:8080;
    }

    location /proxy/ {
        resolver 8.8.8.8;
        proxy_ssl_verify off;
        
        # Initialize an empty variable to construct the query string
        set $args_conditional "";
        set $port_part "";

        # Check if $arg_limit is set and not empty
        if ($arg_limit) {
            set $args_conditional "?limit=$arg_limit";
        }

        # Check if both $arg_limit and $arg_offset are set and not empty
        if ($arg_offset) {
            set $args_conditional "${args_conditional}&offset=$arg_offset";
        }

        # Remove the leading '&' if $arg_limit is empty but $arg_offset is not
        if ($arg_limit = "") {
            set $args_conditional "?offset=$arg_offset";
        }

        # Conditionally set the port part if it is not 80
        if ($arg_port) {
            set $port_part ":$arg_port";
        }

        # Forward the address with the conditional port and query string
        proxy_pass $arg_address$port_part$args_conditional;
        add_header 'Access-Control-Allow-Origin' '*';
    }

    location / {
        root   /usr/share/nginx/html;
        index  index.html;

        try_files $uri $uri/ /index.html?$args;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}